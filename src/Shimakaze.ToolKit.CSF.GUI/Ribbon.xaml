<Fluent:Ribbon
    x:Class="Shimakaze.ToolKit.CSF.GUI.Ribbon"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Fluent="urn:fluent-ribbon"
    xmlns:cmd="clr-namespace:Shimakaze.ToolKit.CSF.GUI.Commands"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i18n="clr-namespace:Shimakaze.ToolKit.CSF.GUI.Strings"
    xmlns:local="clr-namespace:Shimakaze.ToolKit.CSF.GUI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:theme="clr-namespace:Shimakaze.ToolKit.CSF.GUI.Theme"
    x:Name="this"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <!--  开始屏幕  -->
    <Fluent:Ribbon.StartScreen>
        <local:StartScreen x:Name="startScreen" />
    </Fluent:Ribbon.StartScreen>

    <Fluent:Ribbon.ContextualGroups>
        <Fluent:RibbonContextualTabGroup />
    </Fluent:Ribbon.ContextualGroups>

    <!--  Quick Access Toolbar Items  -->
    <Fluent:Ribbon.QuickAccessItems>
        <!--  Use Content or Target Property to set QAT item  -->
        <Fluent:QuickAccessMenuItem IsChecked="true">
            <Fluent:Button Header="Pink" />
        </Fluent:QuickAccessMenuItem>

        <!--  You Can Just Bind with Any Control  -->
        <Fluent:QuickAccessMenuItem Target="{Binding ElementName=buttonGreen}" />
    </Fluent:Ribbon.QuickAccessItems>

    <!--  Backstage  -->
    <Fluent:Ribbon.Menu>
        <Fluent:Backstage>
            <Fluent:BackstageTabControl>
                <Fluent:Button Header="{x:Static i18n:Resources.UI_Open}" Command="{x:Static cmd:CsfMainWindowCommands.OpenFile}"/>
                <Fluent:Button Header="{x:Static i18n:Resources.UI_Save}" Command="{x:Static cmd:CsfMainWindowCommands.SaveFile}"/>
                <Fluent:Button Header="{x:Static i18n:Resources.UI_SaveAs}" Command="{x:Static cmd:CsfMainWindowCommands.SaveAsFile}"/>
                <Fluent:Button Header="{x:Static i18n:Resources.UI_New}" />
                <Fluent:SeparatorTabItem />
                <Fluent:Button Header="{x:Static i18n:Resources.UI_Import}" />
                <Fluent:Button Header="{x:Static i18n:Resources.UI_Export}" />
                <Fluent:Button Header="{x:Static i18n:Resources.UI_Merge}" />
                <Fluent:SeparatorTabItem />
                <Fluent:Button Header="{x:Static i18n:Resources.UI_Close}" />
                <Fluent:SeparatorTabItem />
                <Fluent:Button Header="{x:Static i18n:Resources.UI_ExitApplication}" />
            </Fluent:BackstageTabControl>
        </Fluent:Backstage>
    </Fluent:Ribbon.Menu>

    <!--  Tabs  -->
    <Fluent:RibbonTabItem Header="编辑" KeyTip="E">
        <Fluent:RibbonGroupBox Header="类型">
            <Fluent:Button Header="新建类型" KeyTip="C" />
            <!--  危险操作  -->
            <!--  可以重命名整个类型的标签如"Name:" 无底深坑预定  -->
            <Fluent:Button Header="重命名类型" KeyTip="F2" />
            <!--  直接Drop掉整个类型 包括所有的标签和字符串  -->
            <Fluent:Button Header="移除类型" KeyTip="M" />
        </Fluent:RibbonGroupBox>

        <Fluent:RibbonGroupBox Header="标签">
            <Fluent:Button Header="增加标签" KeyTip="L" />
            <Fluent:Button Header="编辑标签" KeyTip="A" />
            <!--  直接Drop掉整个标签 包括任何字符串  -->
            <Fluent:Button Header="删除标签" KeyTip="D" />
        </Fluent:RibbonGroupBox>


        <Fluent:RibbonGroupBox Header="Others">
            <Fluent:Button
                x:Name="btnToggleTheme"
                Command="{x:Static cmd:ToggleThemeCommand.Instance}"
                Header="DarkMode"
                KeyTip="T" />
            <Fluent:Button
                x:Name="btnShowStartScreen"
                Command="{x:Static cmd:ShowStartScreenCommand.Instance}"
                Header="启动窗口" />
            <Fluent:Button Header="设置" />
        </Fluent:RibbonGroupBox>
    </Fluent:RibbonTabItem>
</Fluent:Ribbon>
